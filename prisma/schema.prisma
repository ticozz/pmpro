datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User & Authentication
model User {
  id                 String               @id @default(cuid())
  email              String               @unique
  password           String
  firstName          String
  lastName           String
  phone              String?
  role               UserRole             @default(USER)
  status             UserStatus           @default(ACTIVE)
  organization       Organization?        @relation(fields: [organizationId], references: [id])
  organizationId     String?
  managedProperties  Property[]           @relation("PropertyManager")
  propertyManaging   Property[]           @relation("PropertyManagerRef")
  tasks              Task[] // Assigned tasks
  notifications      Notification[]
  maintenanceOrders  MaintenanceRequest[]
  tenantNotes        TenantNote[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  OrganizationMember OrganizationMember[]
  auditLogs          AuditLog[]
  lastLoginAt        DateTime?
  AnalyticsEvent     AnalyticsEvent[]
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members        OrganizationMember[]
  properties     Property[]
  units          Unit[]
  leases         Lease[]
  reports        Report[]
  User           User[]
  BankAccount    BankAccount[]
  Subscription   Subscription[]
  AnalyticsEvent AnalyticsEvent[]
  notifications  Notification[]
  Tenant         Tenant[]

  @@map("organizations")
}

model OrganizationMember {
  id             String   @id @default(uuid())
  organizationId String
  userId         String
  role           String   @default("member")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@unique([userId, organizationId])
  @@map("organization_members")
}

// Property Management
model Property {
  id             String       @id @default(cuid())
  name           String
  type           String
  status         Status       @default(ACTIVE)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  address        Address?
  manager        User?        @relation("PropertyManagerRef", fields: [managerId], references: [id])
  managerId      String?
  units          Unit[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  managedBy    User[]             @relation("PropertyManager")
  financials   PropertyFinancial?
  tasks        Task[]
  documents    Document[]
  insurances   Insurance[]
  inspections  Inspection[]
  amenities    Amenity[]
  bankAccounts BankAccount[]
}

model PropertyFinancial {
  id           String        @id @default(cuid())
  property     Property      @relation(fields: [propertyId], references: [id])
  propertyId   String        @unique
  revenue      Float         @default(0)
  expenses     Float         @default(0)
  transactions Transaction[]
  budgets      Budget[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

// Unit Management
model Unit {
  id                  String               @id @default(cuid())
  unitNumber          String
  property            Property             @relation(fields: [propertyId], references: [id])
  propertyId          String
  status              UnitStatus           @default(VACANT)
  type                String? // e.g., "1BR", "2BR", "Studio"
  size                Float? // in square feet/meters
  bedrooms            Int?
  bathrooms           Float?
  rent                Float?
  deposit             Float?
  features            String[] // Array of unit features
  leases              Lease[]
  maintenanceRequests MaintenanceRequest[]
  inspections         Inspection[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  Organization        Organization?        @relation(fields: [organizationId], references: [id])
  organizationId      String?
}

// Tenant Management
model Tenant {
  id             String           @id @default(cuid())
  firstName      String
  lastName       String
  email          String
  phone          String?
  status         TenantStatus     @default(ACTIVE)
  leases         Lease[]
  documents      Document[]
  payments       Payment[]
  background     BackgroundCheck?
  notes          TenantNote[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id])
}

model BackgroundCheck {
  id              String     @id @default(cuid())
  tenant          Tenant     @relation(fields: [tenantId], references: [id])
  tenantId        String     @unique
  status          Status
  creditScore     Int?
  criminalRecord  Boolean
  evictionHistory Boolean
  verifiedIncome  Float?
  documents       Document[]
  completedAt     DateTime?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

// Lease Management
model Lease {
  id             String         @id @default(cuid())
  unit           Unit           @relation(fields: [unitId], references: [id])
  unitId         String
  tenants        Tenant[]
  startDate      DateTime
  endDate        DateTime
  rentAmount     Float
  depositAmount  Float
  status         LeaseStatus    @default(PENDING)
  type           LeaseType      @default(FIXED)
  terms          String? // Additional lease terms
  documents      Document[]
  payments       Payment[]
  renewals       LeaseRenewal[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  Organization   Organization?  @relation(fields: [organizationId], references: [id])
  organizationId String?
}

model LeaseRenewal {
  id            String   @id @default(cuid())
  lease         Lease    @relation(fields: [leaseId], references: [id])
  leaseId       String
  newStartDate  DateTime
  newEndDate    DateTime
  newRentAmount Float
  status        Status   @default(PENDING)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Maintenance Management
model MaintenanceRequest {
  id             String              @id @default(cuid())
  title          String
  description    String
  unit           Unit                @relation(fields: [unitId], references: [id])
  unitId         String
  requestedBy    User                @relation(fields: [requestedById], references: [id])
  requestedById  String
  priority       Priority            @default(MEDIUM)
  status         MaintenanceStatus   @default(OPEN)
  category       MaintenanceCategory
  assignedVendor Vendor?             @relation(fields: [vendorId], references: [id])
  vendorId       String?
  scheduledDate  DateTime?
  completedDate  DateTime?
  cost           Float?
  notes          String?
  images         String[] // URLs to maintenance images
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
}

model Vendor {
  id                  String               @id @default(cuid())
  name                String
  type                VendorType
  email               String               @unique
  phone               String?
  address             String?
  status              Status               @default(ACTIVE)
  specialties         String[] // Array of vendor specialties
  maintenanceRequests MaintenanceRequest[]
  insurance           Insurance[]
  documents           Document[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

// Financial Management
model Payment {
  id              String           @id @default(cuid())
  tenant          Tenant           @relation(fields: [tenantId], references: [id])
  tenantId        String
  lease           Lease            @relation(fields: [leaseId], references: [id])
  leaseId         String
  amount          Float
  type            PaymentType
  status          PaymentStatus    @default(PENDING)
  dueDate         DateTime
  paidDate        DateTime?
  transaction     Transaction?
  bankTransaction BankTransaction?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Transaction {
  id          String            @id @default(cuid())
  property    PropertyFinancial @relation(fields: [propertyId], references: [id])
  propertyId  String
  payment     Payment?          @relation(fields: [paymentId], references: [id])
  paymentId   String?           @unique
  amount      Float
  type        TransactionType
  category    String
  description String?
  date        DateTime
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Budget {
  id         String            @id @default(cuid())
  property   PropertyFinancial @relation(fields: [propertyId], references: [id])
  propertyId String
  year       Int
  month      Int
  category   String
  amount     Float
  actual     Float             @default(0)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

// Additional Features
model Task {
  id           String    @id @default(cuid())
  title        String
  description  String?
  assignedTo   User      @relation(fields: [assignedToId], references: [id])
  assignedToId String
  property     Property  @relation(fields: [propertyId], references: [id])
  propertyId   String
  dueDate      DateTime?
  priority     Priority  @default(MEDIUM)
  status       Status    @default(PENDING)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Notification {
  id             String       @id @default(cuid())
  message        String
  read           Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userId         String
  organizationId String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([organizationId])
}

// Supporting Models
model Document {
  id                String           @id @default(cuid())
  title             String
  type              DocumentType
  fileUrl           String
  property          Property?        @relation(fields: [propertyId], references: [id])
  propertyId        String?
  tenant            Tenant?          @relation(fields: [tenantId], references: [id])
  tenantId          String?
  lease             Lease?           @relation(fields: [leaseId], references: [id])
  leaseId           String?
  vendor            Vendor?          @relation(fields: [vendorId], references: [id])
  vendorId          String?
  backgroundCheck   BackgroundCheck? @relation(fields: [backgroundCheckId], references: [id])
  backgroundCheckId String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  Insurance         Insurance?       @relation(fields: [insuranceId], references: [id])
  insuranceId       String?
}

model Insurance {
  id           String        @id @default(cuid())
  type         InsuranceType
  provider     String
  policyNumber String
  startDate    DateTime
  endDate      DateTime
  coverage     Float
  property     Property?     @relation(fields: [propertyId], references: [id])
  propertyId   String?
  vendor       Vendor?       @relation(fields: [vendorId], references: [id])
  vendorId     String?
  documents    Document[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Inspection {
  id            String         @id @default(cuid())
  property      Property       @relation(fields: [propertyId], references: [id])
  propertyId    String
  unit          Unit?          @relation(fields: [unitId], references: [id])
  unitId        String?
  type          InspectionType
  status        Status         @default(PENDING)
  scheduledDate DateTime
  completedDate DateTime?
  notes         String?
  images        String[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Amenity {
  id         String     @id @default(cuid())
  name       String
  category   String
  properties Property[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Address {
  id         String   @id @default(cuid())
  street     String
  city       String
  state      String
  zipCode    String
  country    String   @default("US")
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Enums
enum UserRole {
  SUPERADMIN
  ADMIN
  MANAGER
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum OrgType {
  PROPERTY_MANAGER
  LANDLORD
  REAL_ESTATE_AGENT
}

enum SubStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PENDING
}

enum PropertyType {
  RESIDENTIAL
  COMMERCIAL
  MIXED
}

enum UnitStatus {
  VACANT
  OCCUPIED
  MAINTENANCE
}

enum TenantStatus {
  ACTIVE
  INACTIVE
}

enum LeaseStatus {
  ACTIVE
  EXPIRED
  TERMINATED
  PENDING
}

enum LeaseType {
  FIXED
  MONTH_TO_MONTH
  FLEXIBLE
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
  COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  EMERGENCY
}

enum MaintenanceStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MaintenanceCategory {
  PLUMBING
  ELECTRICAL
  HVAC
  APPLIANCE
  STRUCTURAL
  GENERAL
}

enum PaymentType {
  RENT
  DEPOSIT
  LATE_FEE
  MAINTENANCE
  UTILITY
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum VendorType {
  MAINTENANCE
  CLEANING
  LANDSCAPING
  SECURITY
  OTHER
}

enum DocumentType {
  LEASE
  INVOICE
  MAINTENANCE
  INSPECTION
  INSURANCE
  LEGAL
  OTHER
}

enum InsuranceType {
  PROPERTY
  LIABILITY
  WORKERS_COMP
  PROFESSIONAL
}

enum InspectionType {
  MOVE_IN
  MOVE_OUT
  ROUTINE
  MAINTENANCE
}

enum NotificationType {
  MAINTENANCE
  PAYMENT
  LEASE
  GENERAL
}

enum BankAccountType {
  CHECKING
  SAVINGS
}

enum BankAccountStatus {
  ACTIVE
  INACTIVE
}

enum TransactionCategory {
  RENT
  MAINTENANCE
  UTILITIES
  INSURANCE
  TAXES
  OTHER
}

model BankAccount {
  id            String            @id @default(cuid())
  name          String
  bankName      String
  accountNumber String
  routingNumber String
  type          BankAccountType
  status        BankAccountStatus @default(ACTIVE)
  balance       Float             @default(0)
  description   String?
  property      Property?         @relation(fields: [propertyId], references: [id])
  propertyId    String?
  organization  Organization      @relation(fields: [orgId], references: [id])
  orgId         String
  transactions  BankTransaction[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@index([propertyId])
  @@index([orgId])
}

model BankTransaction {
  id            String              @id @default(cuid())
  date          DateTime            @default(now())
  description   String
  amount        Float
  type          TransactionType // Using existing TransactionType enum
  category      TransactionCategory
  reference     String              @unique
  bankAccount   BankAccount         @relation(fields: [bankAccountId], references: [id])
  bankAccountId String
  payment       Payment?            @relation(fields: [paymentId], references: [id])
  paymentId     String?             @unique
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  @@index([bankAccountId])
}

model Report {
  id             String       @id @default(uuid())
  name           String
  type           ReportType
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("reports")
}

enum ReportType {
  FINANCIAL
  OCCUPANCY
  MAINTENANCE
  CUSTOM
}

// Add these models for pricing and system settings

model PricingPlan {
  id            String           @id @default(cuid())
  name          String
  description   String?
  price         Float
  billingPeriod BillingPeriod
  isPopular     Boolean          @default(false)
  features      PricingFeature[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  Subscription  Subscription[]
}

model PricingFeature {
  id          String      @id @default(cuid())
  name        String
  description String?
  included    Boolean     @default(false)
  planId      String
  plan        PricingPlan @relation(fields: [planId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  type        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum BillingPeriod {
  MONTHLY
  YEARLY
}

// Add audit log tracking
model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  action    String
  details   String
  metadata  Json?
  createdAt DateTime @default(now())
}

// Add these models for analytics and subscriptions
model Subscription {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  status         String // "ACTIVE", "CANCELLED", "EXPIRED"
  amount         Float
  planId         String?
  plan           PricingPlan? @relation(fields: [planId], references: [id])
  startDate      DateTime
  endDate        DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

// Add analytics tracking
model AnalyticsEvent {
  id             String        @id @default(cuid())
  name           String
  userId         String?
  user           User?         @relation(fields: [userId], references: [id])
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  metadata       Json?
  createdAt      DateTime      @default(now())
}

model TenantNote {
  id          String   @id @default(cuid())
  content     String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  tenantId    String
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([tenantId])
  @@index([createdById])
}
